{"version":3,"sources":["../node_modules/jspdf/dist sync","app/components/table/filterRow/FilterRow.tsx","app/components/table/icons.tsx","app/components/table/Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","icon","fontSize","checkedIcon","FilterRow","LookupFilter","columnDef","options","Object","values","lookup","map","value","Autocomplete","multiple","disableCloseOnSelect","getOptionLabel","option","renderOption","selected","Checkbox","style","marginRight","checked","onChange","_","props","onFilterChanged","tableData","renderInput","params","TextField","variant","renderDefaultFilter","FilterIcon","icons","Filter","type","float","filterValue","event","target","inputProps","title","InputProps","hideFilterIcons","hideFilterIcon","undefined","startAdornment","InputAdornment","position","Tooltip","field","customFilterAndSearch","this","columns","filter","hidden","groupOrder","sort","a","b","columnOrder","TableCell","key","filterCellStyle","getComponentForColumn","TableRow","height","filterRowStyle","React","tableIcons","forwardRef","ref","FirstPage","LastPage","NextPage","PreviousPage","SortArrow","Table","theme","createMuiTheme","palette","secondary","main","colors","common","white","dark","components","MuiSelect","styleOverrides","iconFilled","color","useState","users","setUsers","setColumns","useEffect","usersFromFile","require","setOfVariants","Set","plan","reduce","acc","className","data","filtering","search","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98304582.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 320;","import * as React from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nclass FilterRow extends React.Component<any> {\n  LookupFilter = ({columnDef}: any) => {\n    const options = Object.values(columnDef.lookup).map((value) => value);\n    return (\n      <Autocomplete\n        multiple\n        id=\"checkboxes-tags-demo\"\n        options={options}\n        disableCloseOnSelect\n        getOptionLabel={(option: any) => option}\n        renderOption={(option, {selected}) => (\n          <React.Fragment>\n            <Checkbox\n              icon={icon}\n              checkedIcon={checkedIcon}\n              style={{marginRight: 8}}\n              checked={selected}\n            />\n            {option}\n          </React.Fragment>\n        )}\n        onChange={(_, value: any ) => {\n          this.props.onFilterChanged(\n              columnDef.tableData.id,\n              value,\n          );\n        }}\n        renderInput={(params) => (\n          <TextField {...params} variant=\"standard\" />\n        )}/>\n    );\n  }\n\n  renderDefaultFilter = (columnDef: any) => {\n    const FilterIcon = this.props.icons.Filter;\n    return (\n      <TextField\n        style={columnDef.type === 'numeric' ? {float: 'right'} : {}}\n        type={columnDef.type === 'numeric' ? 'number' : 'search'}\n        value={columnDef.tableData.filterValue || ''}\n        onChange={(event) => {\n          this.props.onFilterChanged(\n              columnDef.tableData.id,\n              event.target.value,\n          );\n        }}\n        inputProps={{'aria-label': `filter data by ${columnDef.title}`}}\n        InputProps={\n          this.props.hideFilterIcons || columnDef.hideFilterIcon ?\n            undefined :\n            {\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Tooltip title=\"Filter\">\n                    <FilterIcon />\n                  </Tooltip>\n                </InputAdornment>\n              ),\n            }\n        }\n      />\n    );\n  };\n\n  getComponentForColumn(columnDef: any) {\n    if (columnDef.field || columnDef.customFilterAndSearch) {\n      if (columnDef.lookup) {\n        return <this.LookupFilter columnDef={columnDef} />;\n      } else {\n        return this.renderDefaultFilter(columnDef);\n      }\n    }\n  }\n\n  render() {\n    const columns = this.props.columns\n        .filter(\n            (columnDef: any) =>\n              !columnDef.hidden && !(columnDef.tableData.groupOrder > -1),\n        )\n        .sort((a: any, b: any) => a.tableData.columnOrder - b.tableData.columnOrder)\n        .map((columnDef: any) => (\n          <TableCell\n            key={columnDef.tableData.id}\n            style={{\n              ...this.props.filterCellStyle,\n              ...columnDef.filterCellStyle,\n            }}\n          >\n            {this.getComponentForColumn(columnDef)}\n          </TableCell>\n        ));\n\n    return (\n      <TableRow style={{height: 10, ...this.props.filterRowStyle}}>\n        {columns}\n      </TableRow>\n    );\n  }\n}\n\nexport default FilterRow;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport {forwardRef} from 'react';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport {Icons} from 'material-table';\n\nconst tableIcons: Icons = {\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n};\n\nexport default tableIcons;\n","import React, {useEffect, useState} from 'react';\nimport MaterialTable, {Column} from 'material-table';\n\nimport './Table.css';\n\nimport {IUser} from './types';\nimport FilterRow from './filterRow/FilterRow';\nimport tableIcons from './icons';\nimport {createMuiTheme, MuiThemeProvider, colors} from '@material-ui/core';\n\nconst Table: React.FC = () => {\n  const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n      secondary: {\n        main: colors.common.white,\n        dark: colors.common.white,\n      },\n    },\n    components: {\n      MuiSelect: {\n        styleOverrides: {\n          iconFilled: {\n            color: '#000',\n          },\n        },\n      },\n    },\n  });\n\n  const [users, setUsers] = useState<IUser[]>([]);\n  const [columns, setColumns] = useState<Column<IUser>[]>([]);\n\n  useEffect(() => {\n    const usersFromFile: IUser[] = require('../../static/users.json');\n    const setOfVariants = new Set([...usersFromFile.map(({plan}) => plan )]);\n    const lookup = [...setOfVariants].reduce((acc, variant) => ({\n      ...acc,\n      [variant]: variant,\n    }), {});\n\n    const columns: Column<IUser>[] = [\n      {title: 'Email', field: 'email'},\n      {title: 'User Plan', field: 'plan', type: 'string', lookup},\n    ];\n\n    setUsers(usersFromFile);\n    setColumns(columns);\n  }, []);\n\n  return (\n    <div className=\"table-wrapper\">\n      <MuiThemeProvider theme={theme}>\n        <MaterialTable\n          columns={columns}\n          data={users}\n          options={{\n            filtering: true,\n            search: false,\n\n          }}\n          components={{\n            FilterRow: FilterRow,\n          }}\n          icons={tableIcons}\n          title=\"Users\"\n        />\n      </MuiThemeProvider>\n    </div>\n  );\n};\n\nexport {Table};\n","import React from 'react';\nimport './App.css';\nimport {Table} from './app/components/table/Table';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Simple table with filtering ability\n      </header>\n      <div className=\"content\">\n        <Table />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}